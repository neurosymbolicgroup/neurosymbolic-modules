srun: job 17816625 queued and waiting for resources
srun: job 17816625 has been allocated resources
Warning: Recognition model needs feature extractor. Ignoring recognition model.
Running EC on node062.cm.cluster @ 2020-09-04 11:22:13.942801 with 1 CPUs and parameters:
	 noConsolidation  =  False
	 iterations  =  2
	 enumerationTimeout  =  18000
	 useRecognitionModel  =  False
	 topk_use_only_likelihood  =  False
	 pseudoCounts  =  30.0
	 aic  =  0.1
	 structurePenalty  =  0.001
	 arity  =  3
	 taskReranker  =  default
	 storeTaskMetrics  =  True
	 rewriteTaskMetrics  =  False
	 maximumFrontier  =  10
	 solver  =  python
	 topK  =  1
	 evaluationTimeout  =  1.0
	 cuda  =  False

Currently using this much memory: 160198656
Currently using this much memory: 160198656
Using a waking task batch of size: 400
Disabling parallelism on the Python side because we only have one job.
If you are using ocaml, there could still be parallelism.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 0.000000 <= MDL < 1.500000. Timeout 18000.000000.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 1.500000 <= MDL < 3.000000. Timeout 17998.469040.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 3.000000 <= MDL < 4.500000. Timeout 17996.890439.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 4.500000 <= MDL < 6.000000. Timeout 17995.367376.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 6.000000 <= MDL < 7.500000. Timeout 17993.843498.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 7.500000 <= MDL < 9.000000. Timeout 17992.168154.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 9.000000 <= MDL < 10.500000. Timeout 17989.920348.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 10.500000 <= MDL < 12.000000. Timeout 17969.481042.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 12.000000 <= MDL < 13.500000. Timeout 17892.529950.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 13.500000 <= MDL < 15.000000. Timeout 17613.737284.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 15.000000 <= MDL < 16.500000. Timeout 16109.355822.
(python) Launching tinput -> toutput (398 tasks) w/ 1 CPUs. 16.500000 <= MDL < 18.000000. Timeout 10497.688429.
We enumerated this many programs, for each task:
	 [727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 390, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 390, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727]
Generative model enumeration results:
MISS 0
MISS 1
MISS 2
MISS 3
MISS 4
MISS 5
MISS 6
MISS 7
MISS 8
MISS 9
MISS 10
MISS 11
MISS 12
MISS 13
MISS 14
MISS 15
MISS 16
MISS 17
MISS 18
MISS 19
MISS 20
MISS 21
MISS 22
MISS 23
MISS 24
MISS 25
MISS 26
MISS 27
MISS 28
MISS 29
MISS 30
MISS 31
MISS 32
MISS 33
MISS 34
MISS 35
HIT 36 w/ (lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))) ; log prior = -10.044987 ; log likelihood = 0.000000
MISS 37
MISS 38
MISS 39
MISS 40
MISS 41
MISS 42
MISS 43
MISS 44
MISS 45
MISS 46
MISS 47
MISS 48
MISS 49
MISS 50
MISS 51
MISS 52
MISS 53
MISS 54
MISS 55
MISS 56
MISS 57
MISS 58
MISS 59
MISS 60
MISS 61
MISS 62
MISS 63
MISS 64
MISS 65
MISS 66
MISS 67
MISS 68
MISS 69
MISS 70
MISS 71
MISS 72
MISS 73
MISS 74
MISS 75
MISS 76
MISS 77
MISS 78
MISS 79
MISS 80
MISS 81
MISS 82
MISS 83
MISS 84
MISS 85
MISS 86
MISS 87
MISS 88
MISS 89
MISS 90
HIT 91 w/ (lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))) ; log prior = -10.044987 ; log likelihood = 0.000000
MISS 92
MISS 93
MISS 94
MISS 95
MISS 96
MISS 97
MISS 98
MISS 99
MISS 100
MISS 101
MISS 102
MISS 103
MISS 104
MISS 105
MISS 106
MISS 107
MISS 108
MISS 109
MISS 110
MISS 111
MISS 112
MISS 113
MISS 114
MISS 115
MISS 116
MISS 117
MISS 118
MISS 119
MISS 120
MISS 121
MISS 122
MISS 123
MISS 124
MISS 125
MISS 126
MISS 127
MISS 128
MISS 129
MISS 130
MISS 131
MISS 132
MISS 133
MISS 134
MISS 135
MISS 136
MISS 137
MISS 138
MISS 139
MISS 140
MISS 141
MISS 142
MISS 143
MISS 144
MISS 145
MISS 146
MISS 147
MISS 148
MISS 149
MISS 150
MISS 151
MISS 152
MISS 153
MISS 154
MISS 155
MISS 156
MISS 157
MISS 158
MISS 159
MISS 160
MISS 161
MISS 162
MISS 163
MISS 164
MISS 165
MISS 166
MISS 167
MISS 168
MISS 169
MISS 170
MISS 171
MISS 172
MISS 173
MISS 174
MISS 175
MISS 176
MISS 177
MISS 178
MISS 179
MISS 180
MISS 181
MISS 182
MISS 183
MISS 184
MISS 185
MISS 186
MISS 187
MISS 188
MISS 189
MISS 190
MISS 191
MISS 192
MISS 193
MISS 194
MISS 195
MISS 196
MISS 197
MISS 198
MISS 199
MISS 200
MISS 201
MISS 202
MISS 203
MISS 204
MISS 205
MISS 206
MISS 207
MISS 208
MISS 209
MISS 210
MISS 211
MISS 212
MISS 213
MISS 214
MISS 215
MISS 216
MISS 217
MISS 218
MISS 219
MISS 220
MISS 221
MISS 222
MISS 223
MISS 224
MISS 225
MISS 226
MISS 227
MISS 228
MISS 229
MISS 230
MISS 231
MISS 232
MISS 233
MISS 234
MISS 235
MISS 236
MISS 237
MISS 238
MISS 239
MISS 240
MISS 241
MISS 242
MISS 243
MISS 244
MISS 245
MISS 246
MISS 247
MISS 248
MISS 249
MISS 250
MISS 251
MISS 252
MISS 253
MISS 254
MISS 255
MISS 256
MISS 257
MISS 258
MISS 259
MISS 260
MISS 261
MISS 262
MISS 263
MISS 264
MISS 265
MISS 266
MISS 267
MISS 268
MISS 269
MISS 270
MISS 271
MISS 272
MISS 273
MISS 274
MISS 275
MISS 276
MISS 277
MISS 278
MISS 279
MISS 280
MISS 281
MISS 282
MISS 283
MISS 284
MISS 285
MISS 286
MISS 287
MISS 288
MISS 289
MISS 290
MISS 291
MISS 292
MISS 293
MISS 294
MISS 295
MISS 296
MISS 297
MISS 298
MISS 299
MISS 300
MISS 301
MISS 302
MISS 303
MISS 304
MISS 305
MISS 306
MISS 307
MISS 308
MISS 309
MISS 310
MISS 311
MISS 312
MISS 313
MISS 314
MISS 315
MISS 316
MISS 317
MISS 318
MISS 319
MISS 320
MISS 321
MISS 322
MISS 323
MISS 324
MISS 325
MISS 326
MISS 327
MISS 328
MISS 329
MISS 330
MISS 331
MISS 332
MISS 333
MISS 334
MISS 335
MISS 336
MISS 337
MISS 338
MISS 339
MISS 340
MISS 341
MISS 342
MISS 343
MISS 344
MISS 345
MISS 346
MISS 347
MISS 348
MISS 349
MISS 350
MISS 351
MISS 352
MISS 353
MISS 354
MISS 355
MISS 356
MISS 357
MISS 358
MISS 359
MISS 360
MISS 361
MISS 362
MISS 363
MISS 364
MISS 365
MISS 366
MISS 367
MISS 368
MISS 369
MISS 370
MISS 371
MISS 372
MISS 373
MISS 374
MISS 375
MISS 376
MISS 377
MISS 378
MISS 379
MISS 380
MISS 381
MISS 382
MISS 383
MISS 384
MISS 385
MISS 386
MISS 387
MISS 388
MISS 389
MISS 390
MISS 391
MISS 392
MISS 393
MISS 394
MISS 395
MISS 396
MISS 397
MISS 398
MISS 399
Hits 2/400 tasks
Average description length of a program solving a task: 10.044987 nats
Generative model average:  19 sec.	median: 19 	max: 20 	standard deviation 1
Currently using this much memory: 272932864
Frontiers discovered top down: 2
Total frontiers: 2
Currently using this much memory: 272932864
Showing the top 5 programs in each frontier being sent to the compressor:
36
-0.26	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0)))))
-2.56	(lambda (stack_no_crop (map (lambda $0) (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))))
-2.74	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (map (lambda $0) (group_objects_by_color (input $0))))))
-3.03	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) (map (lambda $0) $0))) (group_objects_by_color (input $0)))))
-4.76	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input (get (map (lambda $2) $0) 0)) $0)) (group_objects_by_color (input $0)))))

91
-0.26	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0)))))
-2.56	(lambda (stack_no_crop (map (lambda $0) (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))))
-2.74	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (map (lambda $0) (group_objects_by_color (input $0))))))
-3.03	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) (map (lambda $0) $0))) (group_objects_by_color (input $0)))))
-4.76	(lambda (stack_no_crop (map (lambda (draw_connecting_line (input (get (map (lambda $2) $0) 0)) $0)) (group_objects_by_color (input $0)))))

Compression message saved to: compressionMessages/2020-09-04T16:22:17.668757
Compression backend will run for most 5 iterations
Total number of candidates: 11534
Constructed version spaces and coalesced candidates in 1.34225s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 1.11249s.
Initial score: -19.207502
Scored candidates in 44.1206ms.
Improved score to -5.779979 (dScore=13.427524) w/ new primitive
	#(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))) : tinput -> toutput
rewrote all of the frontiers in 32.6851s.
Completed one step of memory consolidation in 35.623s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))) $0))
  (lambda (#(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0))))) $0))
Total number of candidates: 1008
Constructed version spaces and coalesced candidates in 108.846ms.
Trimmed down the beam, have only 298 best candidates
Rewrote topK in 128.522ms.
Initial score: -5.779979
Scored candidates in 59.4718ms.
No improvement possible.
Completed one step of memory consolidation in 328.672ms.
completed ocaml compression in 35.9537s.
Finished consolidation.
Induced a grammar in 36.7 seconds
Grammar after iteration 1:
-0.000007	t0	$_
-0.000001	toriginal -> list(tobject) -> tgrid	draw_connecting_line
-0.000001	int	0
-0.000001	tobject -> tcolor	color
-0.000001	tinput -> toriginal	input
-0.000003	toriginal -> tobject -> tgrid	draw_line_slant_up
-0.000003	toriginal -> tobject -> tgrid	draw_line_slant_down
-0.000003	toriginal -> list(list(tobject))	group_objects_by_color
-0.000006	(t0 -> t1) -> list(t0) -> list(t1)	map
-0.000008	toriginal -> list(tobject)	objects
-0.064537	list(tgrid) -> toutput	stack_no_crop
-0.064539	toutput -> tcolor -> toutput	color_in_grid
-0.064539	tgrid -> tgrid -> toutput	overlay
-0.125183	list(t0) -> int -> t0	get
-0.000003	tinput -> toutput	#(lambda (stack_no_crop (map (lambda (draw_connecting_line (input $1) $0)) (group_objects_by_color (input $0)))))
Currently using this much memory: 272961536
Currently using this much memory: 272961536
Currently using this much memory: 272961536
Using a waking task batch of size: 400
Disabling parallelism on the Python side because we only have one job.
If you are using ocaml, there could still be parallelism.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 0.000000 <= MDL < 1.500000. Timeout 18000.000000.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 1.500000 <= MDL < 3.000000. Timeout 17998.506227.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 3.000000 <= MDL < 4.500000. Timeout 17982.537874.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 4.500000 <= MDL < 6.000000. Timeout 17981.028703.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 6.000000 <= MDL < 7.500000. Timeout 17979.512851.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 7.500000 <= MDL < 9.000000. Timeout 17963.737034.
(python) Launching tinput -> toutput (400 tasks) w/ 1 CPUs. 9.000000 <= MDL < 10.500000. Timeout 17879.551880.
(python) Launching tinput -> toutput (398 tasks) w/ 1 CPUs. 10.500000 <= MDL < 12.000000. Timeout 17736.013225.
(python) Launching tinput -> toutput (398 tasks) w/ 1 CPUs. 12.000000 <= MDL < 13.500000. Timeout 17263.748513.
(python) Launching tinput -> toutput (398 tasks) w/ 1 CPUs. 13.500000 <= MDL < 15.000000. Timeout 15608.781335.
(python) Launching tinput -> toutput (398 tasks) w/ 1 CPUs. 15.000000 <= MDL < 16.500000. Timeout 9847.190663.
srun: Force Terminated job 17816625
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** STEP 17816625.0 ON node062 CANCELLED AT 2020-09-04T21:22:23 DUE TO TIME LIMIT ***
srun: error: node062: task 0: Terminated
